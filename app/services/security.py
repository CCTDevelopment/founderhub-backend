import os
import requests
from datetime import datetime
from uuid import uuid4
from ipaddress import ip_address

from sqlalchemy.orm import Session
from app.models.login_event import LoginEvent
from app.models.user import User
from app.services.email import send_template_email
from app.models.allowed_country import AllowedCountry

IPINFO_TOKEN = os.getenv("IPINFO_TOKEN")

# Define hardcoded allowed countries (G8 + any extras)
ALLOWED_COUNTRIES_DEFAULT = [
    # North America
    ("US", "ðŸ‡ºðŸ‡¸ United States"),
    ("CA", "ðŸ‡¨ðŸ‡¦ Canada"),
    ("MX", "ðŸ‡²ðŸ‡½ Mexico"),

    # Europe (GDPR-compliant, low-risk)
    ("UK", "ðŸ‡¬ðŸ‡§ United Kingdom"),
    ("FR", "ðŸ‡«ðŸ‡· France"),
    ("DE", "ðŸ‡©ðŸ‡ª Germany"),
    ("NL", "ðŸ‡³ðŸ‡± Netherlands"),
    ("SE", "ðŸ‡¸ðŸ‡ª Sweden"),
    ("NO", "ðŸ‡³ðŸ‡´ Norway"),
    ("FI", "ðŸ‡«ðŸ‡® Finland"),
    ("DK", "ðŸ‡©ðŸ‡° Denmark"),
    ("CH", "ðŸ‡¨ðŸ‡­ Switzerland"),
    ("AT", "ðŸ‡¦ðŸ‡¹ Austria"),
    ("IE", "ðŸ‡®ðŸ‡ª Ireland"),
    ("ES", "ðŸ‡ªðŸ‡¸ Spain"),
    ("IT", "ðŸ‡®ðŸ‡¹ Italy"),
    ("BE", "ðŸ‡§ðŸ‡ª Belgium"),
    ("PT", "ðŸ‡µðŸ‡¹ Portugal"),
    ("PL", "ðŸ‡µðŸ‡± Poland"),
    ("CZ", "ðŸ‡¨ðŸ‡¿ Czech Republic"),
    ("SK", "ðŸ‡¸ðŸ‡° Slovakia"),
    ("LT", "ðŸ‡±ðŸ‡¹ Lithuania"),
    ("LV", "ðŸ‡±ðŸ‡» Latvia"),
    ("EE", "ðŸ‡ªðŸ‡ª Estonia"),
    ("LU", "ðŸ‡±ðŸ‡º Luxembourg"),
    ("SI", "ðŸ‡¸ðŸ‡® Slovenia"),
    ("HR", "ðŸ‡­ðŸ‡· Croatia"),

    # Asia-Pacific
    ("AU", "ðŸ‡¦ðŸ‡º Australia"),
    ("NZ", "ðŸ‡³ðŸ‡¿ New Zealand"),
    ("JP", "ðŸ‡¯ðŸ‡µ Japan"),
    ("SG", "ðŸ‡¸ðŸ‡¬ Singapore"),
    ("KR", "ðŸ‡°ðŸ‡· South Korea"),
    ("IN", "ðŸ‡®ðŸ‡³ India"),
    ("PH", "ðŸ‡µðŸ‡­ Philippines"),

    # Middle East (trusted)
    ("AE", "ðŸ‡¦ðŸ‡ª United Arab Emirates"),
    ("IL", "ðŸ‡®ðŸ‡± Israel"),
    ("QA", "ðŸ‡¶ðŸ‡¦ Qatar"),
    ("OM", "ðŸ‡´ðŸ‡² Oman"),
    ("BH", "ðŸ‡§ðŸ‡­ Bahrain"),

    # South America
    ("BR", "ðŸ‡§ðŸ‡· Brazil"),
    ("AR", "ðŸ‡¦ðŸ‡· Argentina"),
    ("CL", "ðŸ‡¨ðŸ‡± Chile"),
    ("CO", "ðŸ‡¨ðŸ‡´ Colombia"),
    ("PE", "ðŸ‡µðŸ‡ª Peru"),
    ("UY", "ðŸ‡ºðŸ‡¾ Uruguay"),

    # Africa (optional, stable markets)
    ("ZA", "ðŸ‡¿ðŸ‡¦ South Africa"),
    ("MU", "ðŸ‡²ðŸ‡º Mauritius"),
    ("KE", "ðŸ‡°ðŸ‡ª Kenya"),
]


def is_private_ip(ip: str) -> bool:
    try:
        return ip_address(ip).is_private
    except ValueError:
        return False


def get_allowed_countries(tenant_id: str, db: Session) -> list[str]:
    countries = db.query(AllowedCountry.country_code).filter(
        AllowedCountry.tenant_id == tenant_id
    ).all()
    return [c[0] for c in countries] if countries else ALLOWED_COUNTRIES_DEFAULT


def get_ip_metadata(ip: str) -> dict:
    try:
        res = requests.get(f"https://ipinfo.io/{ip}?token={IPINFO_TOKEN}", timeout=5)
        return res.json()
    except Exception:
        return {}


def log_login_event(user: User, ip: str, user_agent: str, db: Session):
    # Check if IP is new
    existing = db.query(LoginEvent).filter(
        LoginEvent.user_id == user.id,
        LoginEvent.ip_address == ip
    ).first()

    ip_info = get_ip_metadata(ip)
    country = ip_info.get("country", "Unknown")
    city = ip_info.get("city", "Unknown")
    region = ip_info.get("region", "Unknown")

    is_new = existing is None
    timestamp = datetime.utcnow()

    # Log login event
    login_event = LoginEvent(
        id=str(uuid4()),
        user_id=user.id,
        ip_address=ip,
        location=f"{city}, {region}",
        country=country,
        user_agent=user_agent,
        is_new_ip=is_new,
        created_at=timestamp
    )
    db.add(login_event)
    db.commit()

    # === Enforce Allowed Countries ===
    allowed = get_allowed_countries(str(user.tenant_id), db)

    if (
        is_new
        and country not in allowed
        and not is_private_ip(ip)
        and country != "Unknown"
        and not user.allow_new_region_login
    ):
        raise Exception(f"Login blocked from disallowed country: {country}")

    # === Notify Admin if enabled ===
    if is_new and user.allow_admin_alerts:
        send_template_email(
            db=db,
            to_email="admin@founderhub.ai",
            name="Admin",
            template_key="admin_login_alert",
            variables={
                "email": user.email,
                "ip": ip,
                "location": f"{city}, {region}"
            }
        )

    # === Notify User ===
    if is_new:
        send_template_email(
            db=db,
            to_email=user.email,
            name=user.name,
            template_key="new_login_detected",
            variables={
                "ip": ip,
                "location": f"{city}, {region}",
                "timestamp": timestamp.isoformat()
            }
        )

    return is_new
